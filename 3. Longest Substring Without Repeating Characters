public class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s==null||s.length()==0){
            return 0;
        }
        HashMap<Character,Integer> map=new HashMap<>();
        int index=0,max=0;
        for(int i=0;i<=s.length()-1;++i){
            if(!map.containsKey(s.charAt(i))){
                map.put(s.charAt(i),i);
            }
            else{
                if(max<i-index){
                    max=i-index;
                }
               
                for(int j=index;j<map.get(s.charAt(i));++j){
                    map.remove(s.charAt(j));
                }
                index=map.get(s.charAt(i))+1;
                map.put(s.charAt(i),i); 
            }
        }
        if (max<s.length()-index) return (s.length()-index);
        return max;
    }
}

//High-vote solusion
//It avoids reduce the map
public int lengthOfLongestSubstring(String s) {
        if (s.length()==0) return 0;
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        int max=0;
        for (int i=0, j=0; i<s.length(); ++i){
            if (map.containsKey(s.charAt(i))){
                j = Math.max(j,map.get(s.charAt(i))+1);
            }
            map.put(s.charAt(i),i);
            max = Math.max(max,i-j+1);
        }
        return max;
    }